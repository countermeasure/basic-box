###############################################################################
#
#  Do a Git add and then do then a Git diff of staged changes.
#
#  Arguments:
#    Strings. The arguments to pass to the Git add function.
#
###############################################################################
git_add_then_git_diff() {
    git add --all "$@"
    git diff --staged
}


###############################################################################
#
#  Do a Git add and then do a Git status.
#
#  Arguments:
#    Strings. The arguments to pass to the Git add function.
#
###############################################################################
git_add_then_git_status() {
    git add --all "$@"
    echo
    git status
}


###############################################################################
#
#  Do a Git checkout and then do a Git status.
#
#  Arguments:
#    Strings. The arguments to pass to the Git checkout function.
#
###############################################################################
git_checkout_then_git_status() {
    git checkout "$@"
    echo
    git status
}


###############################################################################
#
#  Do a Git commit of everything which is not yet committed.
#
###############################################################################
git_commit_checkpoint() {
    git add --all
    git commit -m 'Checkpoint'
}


###############################################################################
#
#  Do a Git interactive rebase.
#
#  Arguments:
#    Int. The number of commits to include in the interactive rebase.
#
###############################################################################
git_rebase_interactive() {
    git rebase --interactive HEAD~"$1"
}


###############################################################################
#
#  Do a Git interactive rebase with autosquash.
#
#  Arguments:
#    Int. The number of commits to include in the interactive rebase.
#
###############################################################################
git_rebase_interactive_with_autosquash() {
    git rebase --interactive --autosquash HEAD~"$1"
}


###############################################################################
#
#  Do a Git rebase and then do a Git status.
#
#  Arguments:
#    Strings. The arguments to pass to the Git rebase function.
#
###############################################################################
git_rebase_then_git_status() {
    git rebase "$@"
    echo
    git status
}


###############################################################################
#
#  Change to a parent directory.
#
#  Arguments:
#    Int (optional). The number of parent directories to climb by. Values can
#    be 1 to 99 inclusive.
#
###############################################################################
go_to_parent_directory() {
    if [ -z "$1" ]; then
        cd ..
        return 0
    elif [[ $1 != [1-9]?([0-9]) ]]; then
        echo "Argument must be an integer between 1 and 99."
        return 1
    else
        path=''
        for _ in $(seq "$1"); do
            path+='../'
        done
        cd $path || return 1
        return 0
    fi
}


###############################################################################
#
#  Allow pip to run if inside a virtualenv. If not inside a virtualenv, show a
#  message to prefer pipx.
#
#  Arguments:
#    Strings. The arguments to pass to the pip executable.
#
###############################################################################
only_allow_pip_in_virtualenvs() {
    if [ -n "$VIRTUAL_ENV" ]; then
        \pip "$@";
    else
        echo "Prefer pipx to pip when not in a virtualenv.";
    fi
}


###############################################################################
#
#  Allow pip3 to run if inside a virtualenv. If not inside a virtualenv, show a
#  message to prefer pipx.
#
#  Arguments:
#    Strings. The arguments to pass to the pip3 executable.
#
###############################################################################
only_allow_pip3_in_virtualenvs() {
    if [ -n "$VIRTUAL_ENV" ]; then
        \pip3 "$@";
    else
        echo "Prefer pipx to pip3 when not in a virtualenv.";
    fi
}
