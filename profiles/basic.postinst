#!/bin/bash

# Set intuitive error behaviour.
set -o errexit -o nounset -o pipefail

installer_dir=/media/cdrom/simple-cdd

username=$(ls /home)
user_dir=/home/${username}

bash_completions_dir=${user_dir}/.local/share/bash-completion/completions
fish_completions_dir=${user_dir}/.config/fish/completions
user_bin_dir=${user_dir}/.local/bin
user_config_dir=${user_dir}/.config

sudoers_dir=/etc/sudoers.d

create_directory_as_ordinary_user() {
  # Create a directory owned by the ordinary user, making any subdirectories
  # necessary.
  run_as_ordinary_user "install --directory $1"
}

enable_gnome_extension() {
  # Enable a GNOME Shell extension.
  run_as_ordinary_user "dbus-launch gnome-extensions enable $1"
}

extract_tar() {
  # Make a directory and extract the contents of a tarfile into it.
  mkdir "$2"
  tar --extract \
    --file ${installer_dir}/"$1" \
    --directory "$2" \
    --strip-component 1
}

get_version() {
  # Get the version of a package.
  # Remove anything within square brackets from the string supplied to get the
  # package name as it appears in versions.json.
  package_name=${1//\[*\]/}
  jq ".[\"${package_name}\"]" ${installer_dir}/versions.json | tr --delete '"'
}

git_global_config_set() {
  # Add a setting to the Git global configuration. It's necessary to wrap the
  # second argument in double quotes to set the configuration values
  # correctly.
  run_as_ordinary_user "git config --global $1 \"$2\""
}

gsettings_set() {
  # Change a dconf setting. It's necessary to use dbus-launch ahead of
  # gsettings when invoking this as the root user.
  run_as_ordinary_user "dbus-launch gsettings set org.$1"
}

gsettings_set_with_schemadir() {
  # Change a dconf setting when a schemadir is required. It's necessary to use
  # dbus-launch ahead of gsettings when invoking this as the root user.
  run_as_ordinary_user "dbus-launch gsettings --schemadir $1 set org.$2"
}
install_with_pipx() {
  # Install a Python package with pipx.
  package_version=$(get_version "$1")
  run_as_ordinary_user "pipx install $1==${package_version}"
}

place_as_root_user_with_mode_440() {
  # Place a file with mode 440 and owned by the root user, making any
  # subdirectories necessary.
  install -D --mode 440 "$1" "$2"
}

place_as_root_user_with_mode_644() {
  # Place a file with mode 644 and owned by the root user, making any
  # subdirectories necessary.
  install -D --mode 644 "$1" "$2"
}

place_as_root_user_with_mode_755() {
  # Place a file with mode 755 and owned by the root user, making any
  # subdirectories necessary.
  install -D --mode 755 "$1" "$2"
}

place_as_ordinary_user_with_mode_644() {
  # Place a file with mode 644 and owned by the ordinary user, making any
  # subdirectories necessary.
  run_as_ordinary_user "install -D --mode 644 $1 $2"
}

place_as_ordinary_user_with_mode_755() {
  # Place a file with mode 755 and owned by the ordinary user, making any
  # subdirectories necessary.
  run_as_ordinary_user "install -D --mode 755 $1 $2"
}

run_as_ordinary_user() {
  # Run a command as the ordinary user.
  runuser --login "${username}" --command "$1"
}

# Install build-essential to provide packages like make and gcc for use in this
# file to build and install keyd, and for general use including installing
# Python versions with pyenv.
apt install --yes build-essential

# Install dbus-x11 to provide dbus-launch for use in this file and in the
# first_boot.sh script.
apt install --yes dbus-x11

# Copy first_boot systemd unit file into place.
place_as_ordinary_user_with_mode_755 \
  ${installer_dir}/first_boot.sh "${user_bin_dir}"/first_boot
place_as_root_user_with_mode_644 \
  ${installer_dir}/first_boot.service /etc/systemd/system/first_boot.service

# Enable the first_boot systemd service. This performs configuration tasks
# which can't be done in this postinst script, and is then removed.
systemctl enable first_boot.service

# Install fish.
fish_release_key_url="https://download.opensuse.org/repositories/shells:fish/\
Debian_12/Release.key"
wget \
  --output-document - ${fish_release_key_url} \
  | gpg --dearmor \
    >/etc/apt/trusted.gpg.d/shells_fish.gpg
place_as_root_user_with_mode_644 \
  ${installer_dir}/sources_fish.list /etc/apt/sources.list.d/fish.list
apt update
apt install --yes fish
fish_config_dir="${user_config_dir}"/fish
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/config.fish "${fish_config_dir}"/config.fish
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/fish_aliases "${fish_config_dir}"/fish_aliases
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/fish.theme "${fish_config_dir}"/themes/box.theme
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/fish_functions "${fish_config_dir}"/fish_functions
run_as_ordinary_user 'yes | fish --command "fish_config theme save box"'
# Create the $HOME/.config/fish/conf.d and $HOME/.config/fish/functions
# directories now. This is to avoid them being created the first time a shell
# is opened and having notifications shown then as a result.
create_directory_as_ordinary_user "${fish_config_dir}/conf.d"
create_directory_as_ordinary_user "${fish_config_dir}/functions"

# Install the UFW firewall.
apt install --yes ufw

# Copy the mullvad_vpn.deb file into place so that it is available to
# first_boot.sh which will install the Mullvad VPN app.
place_as_root_user_with_mode_644 \
  ${installer_dir}/mullvad_vpn.deb /usr/local/simple-cdd/mullvad_vpn.deb

# Set up a desktop entry to run the first_login script at login. This performs
# configuration tasks which require user interaction, and is then removed.
place_as_ordinary_user_with_mode_755 \
  ${installer_dir}/first_login.sh "${user_bin_dir}"/first_login
autostart_dir=${user_config_dir}/autostart
run_as_ordinary_user \
  "desktop-file-install --dir ${autostart_dir} ${installer_dir}/first_login.desktop"

# Install Tor Browser Launcher.
apt install --yes torbrowser-launcher

# Install pipx and python3-pip.
apt install --yes pipx
apt install --yes python3-pip
# Add pipx completions for fish.
run_as_ordinary_user \
  'register-python-argcomplete --shell fish pipx >/tmp/pipx_completions.fish'
place_as_ordinary_user_with_mode_644 \
  /tmp/pipx_completions.fish "${fish_completions_dir}"/pipx.fish

# Copy .bashrc extensions into place and enable them.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/dot_bash_aliases "${user_dir}"/.bash_aliases
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/dot_bash_functions "${user_dir}"/.bash_functions
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/dot_bashrc_modifications "${user_dir}"/.bashrc_modifications
printf '\n# Enable .bashrc modifications.\n' >>"${user_dir}"/.bashrc
# shellcheck disable=SC2016
echo '. "${HOME}/.bashrc_modifications"' >>"${user_dir}"/.bashrc

# Copy .profile extension into place and enable it.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/dot_profile_modifications \
  "${user_dir}"/.profile_modifications
printf '\n# Enable .profile modifications.\n' >>"${user_dir}"/.profile
# shellcheck disable=SC2016
echo '. "${HOME}/.profile_modifications"' >>"${user_dir}"/.profile

# Install yt-dlp.
install_with_pipx yt-dlp
extract_tar yt_dlp.tar.gz /tmp/yt_dlp
place_as_root_user_with_mode_644 \
  /tmp/yt_dlp/yt-dlp.1 /usr/local/share/man/man1/yt-dlp.1
place_as_root_user_with_mode_644 \
  /tmp/yt_dlp/completions/bash/yt-dlp \
  /usr/share/bash-completion/completions/yt-dlp
place_as_ordinary_user_with_mode_644 \
  /tmp/yt_dlp/completions/fish/yt-dlp.fish \
  "${fish_completions_dir}"/yt-dlp.fish
# yt-dlp requires ffmpeg.
apt install --yes ffmpeg

# Install ranger.
apt install --yes ranger

# Set dark theme globally.
gsettings_set 'gnome.desktop.interface color-scheme "prefer-dark"'
gsettings_set 'gnome.desktop.interface gtk-theme "Adwaita-dark"'

# Display date and battery percentage in top bar.
gsettings_set 'gnome.desktop.interface clock-show-weekday true'
gsettings_set 'gnome.desktop.interface show-battery-percentage true'

# Never blank screen, dim screen or suspend when inactive.
gsettings_set 'gnome.desktop.session idle-delay 0'
gsettings_set 'gnome.settings-daemon.plugins.power idle-dim false'
gsettings_set \
  'gnome.settings-daemon.plugins.power sleep-inactive-ac-type "nothing"'

# Make display colour warmer at night.
gsettings_set 'gnome.settings-daemon.plugins.color night-light-enabled true'

# Enable natural scrolling for mouse.
gsettings_set 'gnome.desktop.peripherals.mouse natural-scroll true'

# Speed up trackpad and enable trackpad tap-to-click.
gsettings_set 'gnome.desktop.peripherals.touchpad speed 0.25'
gsettings_set 'gnome.desktop.peripherals.touchpad tap-to-click true'

# Enable automatic login.
sed --in-place \
  's/.*AutomaticLoginEnable =.*/AutomaticLoginEnable = true/' \
  /etc/gdm3/daemon.conf
sed --in-place \
  "s/.*AutomaticLogin =.*/AutomaticLogin = ${username}/" \
  /etc/gdm3/daemon.conf

# Install fd-find (fd) and symlink fdfind to fd.
apt install --yes fd-find
ln --symbolic /usr/bin/fdfind /usr/bin/fd

# Install ripgrep.
apt install --yes ripgrep

# Install exa.
apt install --yes exa

# Install bat and symlink batcat to bat.
apt install --yes bat
ln --symbolic /usr/bin/batcat /usr/bin/bat

# Install fzf.
apt install --yes fzf

# Install zoxide.
apt install --yes ${installer_dir}/zoxide.deb

# Install htop.
apt install --yes htop
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/htoprc "${user_config_dir}"/htop/htoprc

# Make the F10 key available in the GNOME Terminal by stopping it from opening
# the GNOME Terminal menu's File item. Without doing this, changes made
# interactively to htop's settings can't be applied.
gsettings_set 'gnome.Terminal.Legacy.Settings menu-accelerator-enabled false'

# Install ncdu.
apt install --yes ncdu

# Install delta.
extract_tar delta.tar.gz /tmp/delta
place_as_root_user_with_mode_755 /tmp/delta/delta /usr/local/bin/delta
extract_tar delta_source.tar.gz /tmp/delta_source
place_as_root_user_with_mode_644 \
  tmp/delta_source/etc/completion/completion.bash \
  /usr/share/bash-completion/completions/delta.bash
place_as_ordinary_user_with_mode_644 \
  /tmp/delta_source/etc/completion/completion.fish \
  "${fish_completions_dir}"/delta.fish

# Install Git
apt install --yes git
# Add Git global config settings for user identity. These are placeholders
# which the user should change.
git_global_config_set 'user.name' 'Basic'
git_global_config_set 'user.email' 'basic@basic.box'
# Add Git global config setting for "git branch" sorting.
git_global_config_set 'branch.sort' '-committerdate'
# Add Git global config settings for "git log" formatting.
git_global_config_set 'log.date' 'format:%b %d %Y'
git_commit_format="%C(yellow)%h %C(white)%<(31)%s %C(dim white)Commit by \
%Creset%C(magenta)%an %C(cyan)%ar %C(dim white)on %ad %C(auto)%d"
git_global_config_set 'format.pretty' "${git_commit_format}"
# Add Git global config setting for "git pull" behaviour.
git_global_config_set 'pull.rebase' 'true'
# Add Git global config setting for "git push" behaviour when no refspec is
# given.
git_global_config_set 'push.default' 'current'
# Add Git global config settings to enable "git rerere" functionality.
git_global_config_set 'rerere.autoupdate' 'true'
git_global_config_set 'rerere.enabled' 'true'
# Add Git global config settings recommended by delta.
git_global_config_set 'core.pager' 'delta'
git_global_config_set 'delta.navigate' 'true'
git_global_config_set 'diff.colorMoved' 'default'
git_global_config_set 'interactive.diffFilter' 'delta --color-only'
git_global_config_set 'merge.conflictstyle' 'diff3'
# Add Git global config settings for line numbers for delta.
git_global_config_set 'delta.line-numbers' 'true'
# Add Git global config setting for default branch in new repositories.
git_global_config_set 'init.defaultBranch' 'main'

# Install gitk
apt install --yes gitk
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/gitk "${user_config_dir}"/git/gitk

# Install and configure keyd.
extract_tar keyd_source.tar.gz /tmp/keyd_source
make --directory /tmp/keyd_source
make --directory /tmp/keyd_source install
# keyd requires the configuration file to be available in /etc/keyd, but prefer
# to keep it within the user's home directory.
keyd_dir="${user_config_dir}"/keyd
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/keyd_default.conf "${keyd_dir}"/default.conf
ln --symbolic "${keyd_dir}"/default.conf /etc/keyd/default.conf

# Make the "box" command available everywhere.
place_as_ordinary_user_with_mode_755 \
  ${installer_dir}/box.sh "${user_bin_dir}"/box

# Install direnv.
apt install --yes direnv

# Install Fira Code Nerd Font.
place_as_root_user_with_mode_644 \
  ${installer_dir}/fira_code.ttf /usr/local/share/fonts/fira_code.ttf
# Make Fira Code the system-wide monospace font.
gsettings_set \
  'gnome.desktop.interface monospace-font-name "FiraCode Nerd Font 11"'

# Install Starship.
tar --extract \
  --file ${installer_dir}/starship.tar.gz \
  --directory /usr/local/bin
# The Starship binary is called with its full path here as calling it just with
# starship doesn't work.
/usr/local/bin/starship completions bash > \
  /usr/share/bash-completion/completions/starship.bash
/usr/local/bin/starship completions fish >/tmp/starship.fish
place_as_ordinary_user_with_mode_644 \
  /tmp/starship.fish "${fish_completions_dir}"/starship.fish
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/starship.toml "${user_config_dir}"/starship.toml

# Install HTTPie.
install_with_pipx httpie
# The completion files need to be named with the commands which they relate to
# to work, so rather than naming them httpie.*, they are named http[s].*.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/httpie-completion.bash "${bash_completions_dir}"/http.bash
ln --symbolic \
  "${bash_completions_dir}"/http.bash \
  "${bash_completions_dir}"/https.bash
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/httpie-completion.fish "${fish_completions_dir}"/http.fish
# HTTPie doesn't provide a fish completion file for https, so the fish
# completion file for http is used with modifications.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/httpie-completion.fish "${fish_completions_dir}"/https.fish
sed --in-place \
  's/^complete -c http/complete -c https/g' \
  "${fish_completions_dir}"/https.fish

# Install Nmap.
apt install --yes nmap

# Install KeePassXC.
apt install --yes keepassxc
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/keepassxc.ini "${user_config_dir}"/keepassxc/keepassxc.ini

# Add post-installation setup instructions.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/setup.rst "${user_dir}"/setup.rst

# Install IPython.
install_with_pipx ipython

# Install Entomb.
install_with_pipx entomb

# Install MTR.
apt install --yes mtr-tiny

# Install tree.
apt install --yes tree

# Install tldr-pages.
install_with_pipx tldr
# tldr is called with its full path here as calling it just with tldr doesn't
# work.
"${user_bin_dir}"/tldr --print-completion bash >/tmp/tldr.bash
place_as_ordinary_user_with_mode_644 \
  /tmp/tldr.bash "${bash_completions_dir}"/tldr.bash

# Install OfflineIMAP.
apt install --yes offlineimap

# Add a global Git ignore file.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/git_global_ignore "${user_config_dir}"/git/ignore

# Install trash-cli.
install_with_pipx trash-cli
extract_tar trash_cli_source.tar.gz /tmp/trash_cli_source
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash.1 /usr/local/share/man/man1/trash.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-empty.1 \
  /usr/local/share/man/man1/trash-empty.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-list.1 \
  /usr/local/share/man/man1/trash-list.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-put.1 \
  /usr/local/share/man/man1/trash-put.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-restore.1 \
  /usr/local/share/man/man1/trash-restore.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-rm.1 \
  /usr/local/share/man/man1/trash-rm.1

# Add a Ranger rc.conf file.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/ranger_rc.conf "${user_config_dir}"/ranger/rc.conf

# Install Neovim.
# The default Vim package is no longer required, so remove it first.
apt purge --yes vim-tiny
nvim_path=/usr/local/bin/nvim
place_as_root_user_with_mode_755 ${installer_dir}/nvim.appimage ${nvim_path}
extract_tar nvim_source.tar.gz /tmp/nvim_source
place_as_root_user_with_mode_644 \
  /tmp/nvim_source/src/man/nvim.1 /usr/local/share/man/man1/nvim.1
# Set Neovim as the alternative for the editor, ex, rview, rvim, vi, view, vim
# and vimdiff commands.
update-alternatives --install /usr/bin/editor editor ${nvim_path} 50
update-alternatives --install /usr/bin/ex ex ${nvim_path} 50
update-alternatives --install /usr/bin/rview rview ${nvim_path} 50
update-alternatives --install /usr/bin/rvim rvim ${nvim_path} 50
update-alternatives --install /usr/bin/vi vi ${nvim_path} 50
update-alternatives --install /usr/bin/view view ${nvim_path} 50
update-alternatives --install /usr/bin/vim vim ${nvim_path} 50
update-alternatives --install /usr/bin/vimdiff vimdiff ${nvim_path} 50

# Configure Neovim.
# Put the LazyVim files in place.
nvim_config_dir=${user_config_dir}/nvim
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_init.lua \
  "${nvim_config_dir}"/init.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_lazy_lock.json \
  "${nvim_config_dir}"/lazy-lock.json
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_config_autocmds.lua \
  "${nvim_config_dir}"/lua/config/autocmds.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_config_keymaps.lua \
  "${nvim_config_dir}"/lua/config/keymaps.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_config_lazy.lua \
  "${nvim_config_dir}"/lua/config/lazy.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_config_options.lua \
  "${nvim_config_dir}"/lua/config/options.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_colourscheme.lua \
  "${nvim_config_dir}"/lua/plugins/colourscheme.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_conform.lua \
  "${nvim_config_dir}"/lua/plugins/conform.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_lualine.lua \
  "${nvim_config_dir}"/lua/plugins/lualine.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_luasnip.lua \
  "${nvim_config_dir}"/lua/plugins/luasnip.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_mason.lua \
  "${nvim_config_dir}"/lua/plugins/mason.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_neotree.lua \
  "${nvim_config_dir}"/lua/plugins/neotree.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_nvim_cmp.lua \
  "${nvim_config_dir}"/lua/plugins/nvim_cmp.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_nvim_lint.lua \
  "${nvim_config_dir}"/lua/plugins/nvim_lint.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_nvim_lspconfig.lua \
  "${nvim_config_dir}"/lua/plugins/nvim_lspconfig.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_ranger.lua \
  "${nvim_config_dir}"/lua/plugins/ranger.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_telescope.lua \
  "${nvim_config_dir}"/lua/plugins/telescope.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_treesitter.lua \
  "${nvim_config_dir}"/lua/plugins/treesitter.lua
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/nvim_plugins_which_key.lua \
  "${nvim_config_dir}"/lua/plugins/which_key.lua
# Install Python LSP Server and its third-party plugins.
install_with_pipx python-lsp-server[flake8]
pyls_isort_version=$(get_version pyls-isort)
run_as_ordinary_user \
  "pipx inject python-lsp-server pyls-isort==${pyls_isort_version}"
python_lsp_black_version=$(get_version python-lsp-black)
run_as_ordinary_user \
  "pipx inject python-lsp-server python-lsp-black==${python_lsp_black_version}"
# Set up LazyVim.
run_as_ordinary_user 'nvim --headless "+Lazy! restore" +qa'

# Install curl.
apt install --yes curl

# Install rfkill. This is used to turn Bluetooth off when the system boots.
apt install --yes rfkill

# Add a yt-dlp configuration file.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/yt_dlp_config \
  "${user_config_dir}"/yt-dlp/config

# Install atool.
apt install --yes atool

# Install bandwhich.
tar --extract \
  --file ${installer_dir}/bandwhich.tar.gz \
  --directory /usr/local/bin
extract_tar bandwhich_source.tar.gz /tmp/bandwhich_source
place_as_root_user_with_mode_644 \
  /tmp/bandwhich_source/docs/bandwhich.1 /usr/local/share/man/man1/bandwhich.1
# Allow bandwhich to run without being called with sudo.
setcap \
  cap_sys_ptrace,cap_dac_read_search,cap_net_raw,cap_net_admin+ep \
  /usr/local/bin/bandwhich

# Install whois.
apt install --yes whois

# Add ranger colourscheme.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/ranger_colourscheme.py \
  "${user_config_dir}"/ranger/colorschemes/box.py

# Install smartmontools.
apt install --yes smartmontools

# Install python-is-python3.
apt install --yes python-is-python3

# Install zathura.
apt install --yes zathura
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/zathurarc "${user_config_dir}"/zathura/zathurarc

# Add ranger rifle.conf and scope.sh files.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/ranger_rifle.conf \
  "${user_config_dir}"/ranger/rifle.conf
place_as_ordinary_user_with_mode_755 \
  ${installer_dir}/ranger_scope.sh \
  "${user_config_dir}"/ranger/scope.sh

# Install acpi.
apt install --yes acpi

# Install Syncthing.
wget \
  --output-document /usr/share/keyrings/syncthing-archive-keyring.gpg \
  https://syncthing.net/release-key.gpg
place_as_root_user_with_mode_644 \
  ${installer_dir}/sources_syncthing.list \
  /etc/apt/sources.list.d/syncthing.list
apt update
apt install --yes syncthing
# Allow passwordless sudo for the ufw command which deletes the Syncthing
# firewall rule. This is required for the "box sync" command to work properly
# when the terminal it is executed in is closed before Syncthing is closed.
place_as_root_user_with_mode_440 \
  ${installer_dir}/sudoers_ufw ${sudoers_dir}/ufw

# Add ipython_config.py file.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/ipython_config.py \
  "${user_dir}"/.ipython/profile_default/ipython_config.py

# Allow passwordless sudo for the apt update and apt upgrade commands.
place_as_root_user_with_mode_440 \
  ${installer_dir}/sudoers_apt ${sudoers_dir}/apt

# Install Lynis.
apt install --yes lynis
# Allow passwordless sudo for the "lynis audit system" command.
place_as_root_user_with_mode_440 \
  ${installer_dir}/sudoers_lynis ${sudoers_dir}/lynis

# Install ClamAV.
apt install --yes clamav

# Install Rootkit Hunter.
apt install --yes rkhunter
# Allow passwordless sudo for the "rkhunter" command.
place_as_root_user_with_mode_440 \
  ${installer_dir}/sudoers_rkhunter ${sudoers_dir}/rkhunter

# Install pyenv.
pyenv_dir="${user_dir}"/.pyenv
extract_tar pyenv_source.tar.gz /tmp/pyenv_source
mkdir -p "${pyenv_dir}"
cp --recursive /tmp/pyenv_source/* "${pyenv_dir}"
chown --recursive "${username}":"${username}" "${pyenv_dir}"
# Install Python build dependencies. This is the complete list taken from
# https://github.com/pyenv/pyenv/wiki#suggested-build-environment. Even though
# some of these packages are already installed, the list is used here without
# modification in case in the future something changes so that a package which
# is currently installed and in the list is no longer installed.
apt install --yes \
  build-essential \
  curl \
  libbz2-dev \
  libffi-dev \
  liblzma-dev \
  libncursesw5-dev \
  libreadline-dev \
  libsqlite3-dev \
  libssl-dev \
  libxml2-dev \
  libxmlsec1-dev \
  llvm \
  make \
  tk-dev \
  wget \
  xz-utils \
  zlib1g-dev

# Install geckodriver.
tar --extract \
  --file ${installer_dir}/geckodriver.tar.gz \
  --directory /usr/local/bin

# Install JupyterLab.
install_with_pipx jupyterlab
# Share JupyterLab user settings across all JupyterLab environments.
jupyterlab_apputils_extension_dir="${user_dir}/.jupyter/lab/user-settings/\
@jupyterlab/apputils-extension"
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/jupyterlab_apputils_settings \
  "${jupyterlab_apputils_extension_dir}"/themes.jupyterlab-settings
jupyterlab_codemiror_extension_dir="${user_dir}/.jupyter/lab/user-settings/\
@jupyterlab/codemirror-extension"
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/jupyterlab_codemirror_settings \
  "${jupyterlab_codemiror_extension_dir}"/commands.jupyterlab-settings

# Allow passwordless sudo for the "powertop" command.
place_as_root_user_with_mode_440 \
  ${installer_dir}/sudoers_powertop ${sudoers_dir}/powertop

# Install TLP.
apt install --yes tlp
# Allow passwordless sudo for the "tlp" and "tlp-stat" commands.
place_as_root_user_with_mode_440 \
  ${installer_dir}/sudoers_tlp ${sudoers_dir}/tlp
# Configure battery charging thresholds.
place_as_root_user_with_mode_644 \
  ${installer_dir}/tlp_charging_thresholds.conf \
  /etc/tlp.d/10-charging-thresholds.conf

# Install Libnotify. This provides the notify-send command.
apt install --yes libnotify-bin

# Don't show the lecture message the first time "sudo" is used.
place_as_root_user_with_mode_440 \
  ${installer_dir}/sudoers_lecture ${sudoers_dir}/lecture

# Allow passwordless sudo for the "cryptsetup isLuks" command.
# This is so that the first_login.sh script doesn't need to ask for a password
# when looking for additional encrypted disks.
place_as_root_user_with_mode_440 \
  ${installer_dir}/sudoers_cryptsetup ${sudoers_dir}/cryptsetup

# Install Thunderbird.
apt install --yes thunderbird

# Make the "git_wrapper" command available everywhere.
place_as_ordinary_user_with_mode_755 \
  ${installer_dir}/git_wrapper.sh "${user_bin_dir}"/git_wrapper

# Install wl-clipboard.
apt install --yes wl-clipboard

# Install Podman.
apt install --yes podman

# Set the terminal bell to visual rather than audible.
gsettings_set 'gnome.desktop.wm.preferences audible-bell false'
gsettings_set 'gnome.desktop.wm.preferences visual-bell true'
gsettings_set 'gnome.desktop.wm.preferences visual-bell-type "frame-flash"'

# Configure Firefox.
place_as_root_user_with_mode_644 \
  ${installer_dir}/firefox_policies.json \
  /usr/share/firefox-esr/distribution/policies.json

# Randomise MAC address.
place_as_root_user_with_mode_644 \
  ${installer_dir}/nm_mac_randomisation.conf \
  /etc/NetworkManager/conf.d/mac_randomisation.conf

# Copy check_vpn systemd unit file and the script it controls into place.
place_as_ordinary_user_with_mode_755 \
  ${installer_dir}/check_vpn.sh "${user_bin_dir}"/check_vpn
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/check_vpn.service \
  "${user_config_dir}"/systemd/user/check_vpn.service

# Don't show the GNOME Initial Setup workflow.
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/gnome_initial_setup_done \
  "${user_config_dir}"/gnome-initial-setup-done

# Set the Nautilus file manager to show items in a list with directories first.
gsettings_set 'gnome.nautilus.preferences default-folder-viewer "list-view"'
gsettings_set 'gtk.gtk4.Settings.FileChooser sort-directories-first true'
gsettings_set 'gtk.Settings.FileChooser sort-directories-first true'

# Install Signal.
wget \
  --output-document - https://updates.signal.org/desktop/apt/keys.asc \
  | gpg --dearmor \
    >/usr/share/keyrings/signal-desktop-keyring.gpg
place_as_root_user_with_mode_644 \
  ${installer_dir}/sources_signal.list /etc/apt/sources.list.d/signal.list
apt update
apt install --yes signal-desktop

# Install duf.
apt install --yes duf

# Install GNOME Shell extensions.
apt install --yes gnome-shell-extension-appindicator
apt install --yes gnome-shell-extension-bluetooth-quick-connect
apt install --yes gnome-shell-extension-dashtodock
apt install --yes gnome-shell-extension-shortcuts
apt install --yes gnome-shell-extension-system-monitor
apt install --yes gnome-shell-extensions-extra

# Enable GNOME Shell extensions.
enable_gnome_extension apps-menu@gnome-shell-extensions.gcampax.github.com
enable_gnome_extension bluetooth-quick-connect@bjarosze.gmail.com
enable_gnome_extension dash-to-dock@micxgx.gmail.com
enable_gnome_extension middleclickclose@paolo.tranquilli.gmail.com
enable_gnome_extension \
  native-window-placement@gnome-shell-extensions.gcampax.github.com
enable_gnome_extension places-menu@gnome-shell-extensions.gcampax.github.com
enable_gnome_extension \
  screenshot-window-sizer@gnome-shell-extensions.gcampax.github.com
enable_gnome_extension Shortcuts@kyle.aims.ac.za
enable_gnome_extension system-monitor@paradoxxx.zero.gmail.com
enable_gnome_extension ubuntu-appindicators@ubuntu.com
enable_gnome_extension \
  workspace-indicator@gnome-shell-extensions.gcampax.github.com

# Configure GNOME Shell extensions.
bluetooth_quick_connect_schemadir="/usr/share/gnome-shell/extensions/\
bluetooth-quick-connect@bjarosze.gmail.com/schemas"
gsettings_set_with_schemadir \
  ${bluetooth_quick_connect_schemadir} \
  'gnome.shell.extensions.bluetooth-quick-connect bluetooth-auto-power-off true'
gsettings_set_with_schemadir \
  ${bluetooth_quick_connect_schemadir} \
  'gnome.shell.extensions.bluetooth-quick-connect bluetooth-auto-power-on true'
gsettings_set 'gnome.shell.extensions.dash-to-dock multi-monitor true'
gsettings_set \
  'gnome.shell.extensions.dash-to-dock disable-overview-on-startup true'
gsettings_set_with_schemadir \
  '/usr/share/gnome-shell/extensions/Shortcuts@kyle.aims.ac.za/schemas' \
  'gnome.shell.extensions.shortcuts visibility 85'
gsettings_set 'gnome.shell.extensions.system-monitor cpu-style "digit"'
gsettings_set 'gnome.shell.extensions.system-monitor disk-usage-style "none"'
gsettings_set 'gnome.shell.extensions.system-monitor icon-display false'
gsettings_set 'gnome.shell.extensions.system-monitor memory-style "digit"'
gsettings_set 'gnome.shell.extensions.system-monitor net-style "digit"'
# TODO: Add maps to favourites
favorite_apps="[\
'firefox-esr.desktop', \
'thunderbird.desktop', \
'signal-desktop.desktop', \
'org.keepassxc.KeePassXC.desktop', \
'org.gnome.Nautilus.desktop', \
'org.gnome.Terminal.desktop', \
'org.gnome.clocks.desktop']"
gsettings_set "gnome.shell favorite-apps \"${favorite_apps}\""

# Install, enable and configure PaperWM GNOME Shell extension.
# TODO: Remove the next command?
paperwm_dir="${user_dir}/.local/share/gnome-shell/extensions/paperwm@paperwm.github.com"
run_as_ordinary_user "unzip ${installer_dir}/paperwm.zip -d /tmp/paperwm"
run_as_ordinary_user "mkdir -p ${paperwm_dir}"
paperwm_version=$(get_version paperwm)
run_as_ordinary_user "cp --recursive /tmp/paperwm/PaperWM-${paperwm_version}/* ${paperwm_dir}"
enable_gnome_extension paperwm@paperwm.github.com
place_as_ordinary_user_with_mode_644 \
  ${installer_dir}/paperwm.css "${user_config_dir}"/paperwm/user.css
# TODO: Shorten the next line.
gnome_terminal_winprops="['{\"wm_class\":\"gnome-terminal-server\",\"preferredWidth\":\"50%\",\"title\":\"Terminal\"}']"
gsettings_set \
  "gnome.shell.extensions.paperwm winprops \"${gnome_terminal_winprops}\""

gsettings_set 'gnome.mutter dynamic-workspaces false'
gsettings_set 'gnome.desktop.wm.preferences num-workspaces 9'
# TODO: Stop paperwm from showing the workspace in left corner

# Install Mullvad Browser.
extract_tar ${installer_dir}/mullvad_browser.tar.xz /opt/mullvad_browser
/opt/mullvad_browser/start-tor-browser.desktop --register-app

# Install ExifTool.
apt install --yes exiftool

# Set launcher shortcuts.
gsettings_set 'gnome.settings-daemon.plugins.media-keys email "['\''<Super>m'\'']"'
gsettings_set 'gnome.settings-daemon.plugins.media-keys www "['\''<Super>b'\'']"'

# Add custom launcher shortcuts.
# TODO: Shorten the next lines.
gsettings_set \
  'gnome.settings-daemon.plugins.media-keys custom-keybindings "['\''/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0'\'']"'
# TODO: Add
# gsettings_set \
#   'gnome.settings-daemon.plugins.media-keys.custom-keybindings.custom0 binding "<Super>s"'
# gsettings_set \
#   'gnome.settings-daemon.plugins.media-keys.custom-keybindings.custom0 command "signal-desktop"'
# gsettings_set \
#   'gnome.settings-daemon.plugins.media-keys.custom-keybindings.custom0 name "Signal"'
gsettings_set \
  'gnome.settings-daemon.plugins.media-keys.custom-keybindings.custom0 binding "<Super>Return"'
gsettings_set \
  'gnome.settings-daemon.plugins.media-keys.custom-keybindings.custom0 command "gnome-terminal"'
gsettings_set \
  'gnome.settings-daemon.plugins.media-keys.custom-keybindings.custom0 name "Terminal"'
# TODO: Add
# gsettings_set \
#   'gnome.settings-daemon.plugins.media-keys.custom-keybindings.custom2 binding "<Super>v"'
# gsettings_set \
#   'gnome.settings-daemon.plugins.media-keys.custom-keybindings.custom2 command "/opt/Mullvad\ VPN/mullvad-vpn"'
# gsettings_set \
#   'gnome.settings-daemon.plugins.media-keys.custom-keybindings.custom2 name "VPN"'

# Generate fish completions.
# This should stay at the end on the basic.postinst file so that it generates
# completions after all packages have been installed.
run_as_ordinary_user 'fish --command fish_update_completions'

# Create or update the manual page index caches.
# This should stay at the end on the basic.postinst file so that it does the
# creates/updates after all packages have been installed.
mandb
