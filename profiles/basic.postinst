#!/bin/bash

# Set intuitive error behaviour.
set -o errexit -o nounset -o pipefail

INSTALLER_DIR='/media/cdrom/simple-cdd'

USERNAME=$(ls /home)
USER_DIR="/home/$USERNAME"
USER_BIN_DIR="$USER_DIR/.local/bin"
USER_CONFIG_DIR="$USER_DIR/.config"
AUTOSTART_DIR="$USER_CONFIG_DIR/autostart"

extract_tar() {
  # Make a directory and extract the contents of a tarfile into it.
  mkdir "$2"
  tar --extract --file $INSTALLER_DIR/"$1" --directory "$2" --strip-component 1
}

get_version() {
  # Get the version of a package.
  # Remove anything within square brackets from the string supplied to get the
  # package name as it appears in versions.json.
  PACKAGE_NAME=${1//\[*\]/}
  jq ".[\"$PACKAGE_NAME\"]" ${INSTALLER_DIR}/versions.json | tr --delete '"'
}

git_global_config_set() {
  # Add a setting to the Git global configuration. It's necessary to wrap the
  # second argument in double quotes to set the configuration values
  # correctly.
  runuser --login "$USERNAME" --command "git config --global $1 \"$2\""
}

gsettings_set() {
  # Change a dconf setting. It's necessary to use dbus-launch ahead of
  # gsettings when invoking this as the root user.
  runuser \
    --login "$USERNAME" \
    --command "dbus-launch gsettings set org.gnome.$1"
}

install_with_pipx() {
  # Install a Python package with pipx.
  PACKAGE_VERSION=$(get_version "$1")
  runuser --login "$USERNAME" --command "pipx install $1==${PACKAGE_VERSION}"
}

place_as_root_user_with_mode_440() {
  # Place a file with mode 440 and owned by the root user, making any
  # subdirectories necessary.
  install -D --mode=440 "$1" "$2"
}

place_as_root_user_with_mode_644() {
  # Place a file with mode 644 and owned by the root user, making any
  # subdirectories necessary.
  install -D --mode=644 "$1" "$2"
}

place_as_root_user_with_mode_755() {
  # Place a file with mode 755 and owned by the root user, making any
  # subdirectories necessary.
  install -D --mode=755 "$1" "$2"
}

place_as_unprivileged_user_with_mode_644() {
  # Place a file with mode 644 and owned by the unprivileged user, making any
  # subdirectories necessary.
  runuser --login "$USERNAME" --command "install -D --mode=644 $1 $2"
}

place_as_unprivileged_user_with_mode_755() {
  # Place a file with mode 755 and owned by the unprivileged user, making any
  # subdirectories necessary.
  runuser --login "$USERNAME" --command "install -D --mode=755 $1 $2"
}

# Install jq.
apt install --yes jq

# Copy first_boot systemd unit file into place.
place_as_unprivileged_user_with_mode_755 \
  $INSTALLER_DIR/first_boot.sh "$USER_BIN_DIR"/first_boot
place_as_root_user_with_mode_644 \
  $INSTALLER_DIR/first_boot.service /etc/systemd/system/first_boot.service

# Enable the first_boot systemd service. This performs configuration tasks
# which can't be done in this postinst script, and is then removed.
systemctl enable first_boot.service

# Install the UFW firewall.
apt install ufw

# Install the Mullvad VPN app.
apt install --yes $INSTALLER_DIR/mullvad.deb

# Set up a desktop entry to run the first_login script at login. This performs
# configuration tasks which require user interaction, and is then removed.
place_as_unprivileged_user_with_mode_755 \
  $INSTALLER_DIR/first_login.sh "$USER_BIN_DIR"/first_login
runuser \
  --login \
  "$USERNAME" \
  --command \
  "desktop-file-install --dir=$AUTOSTART_DIR $INSTALLER_DIR/first_login.desktop"

# Enable Backports to be able to install Tor Browser Launcher.
place_as_root_user_with_mode_644 \
  $INSTALLER_DIR/backports.list /etc/apt/sources.list.d/backports.list
apt update

# Install Tor Browser Launcher. Only the Backports package works for Bullseye
# now.
apt install --target-release bullseye-backports --yes torbrowser-launcher

# Install pipx.
apt install --yes python3-pip python3-venv
PIPX_VERSION=$(get_version 'pipx')
runuser --login "$USERNAME" --command "pip3 install pipx==${PIPX_VERSION}"

# Copy .bashrc extensions into place and enable them.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/dot_bashrc_aliases "$USER_DIR"/.bashrc_aliases
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/dot_bashrc_functions "$USER_DIR"/.bashrc_functions
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/dot_bashrc_modifications "$USER_DIR"/.bashrc_modifications
printf '\n# Enable .bashrc extensions.\n' >>"$USER_DIR"/.bashrc
# shellcheck disable=SC2016
echo 'for file in ~/.bashrc_*; do . "$file"; done' >>"$USER_DIR"/.bashrc

# Copy .profile extension into place and enable it.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/dot_profile_modifications "$USER_DIR"/.profile_modifications
printf '\n# Enable .profile modifications.\n' >>"$USER_DIR"/.profile
# shellcheck disable=SC2016
echo '. "$HOME/.profile_modifications"' >>"$USER_DIR"/.profile

# Install yt-dlp.
install_with_pipx 'yt-dlp'
extract_tar yt_dlp.tar.gz /tmp/yt_dlp
place_as_root_user_with_mode_644 \
  /tmp/yt_dlp/yt-dlp.1 /usr/local/share/man/man1/yt-dlp.1
place_as_root_user_with_mode_644 \
  /tmp/yt_dlp/completions/bash/yt-dlp \
  /usr/share/bash-completion/completions/yt-dlp
mandb

apt install --yes ffmpeg

# Install ranger.
apt install --yes ranger

# Set dark theme globally.
gsettings_set 'desktop.interface gtk-theme "Adwaita-dark"'

# Display date and battery percentage in top bar.
gsettings_set 'desktop.interface clock-show-weekday true'
gsettings_set 'desktop.interface show-battery-percentage true'

# Never blank screen, dim screen or suspend when inactive.
gsettings_set 'desktop.session idle-delay 0'
gsettings_set 'settings-daemon.plugins.power idle-dim false'
gsettings_set 'settings-daemon.plugins.power sleep-inactive-ac-type "nothing"'

# Make display colour warmer at night.
gsettings_set 'settings-daemon.plugins.color night-light-enabled true'

# Enable natural scrolling for mouse.
gsettings_set 'desktop.peripherals.mouse natural-scroll true'

# Speed up trackpad and enable trackpad tap-to-click.
gsettings_set 'desktop.peripherals.touchpad speed 0.25'
gsettings_set 'desktop.peripherals.touchpad tap-to-click true'

# Enable automatic login.
sed -i \
  's/.*AutomaticLoginEnable =.*/AutomaticLoginEnable = true/' \
  /etc/gdm3/daemon.conf
sed -i \
  "s/.*AutomaticLogin =.*/AutomaticLogin = $USERNAME/" \
  /etc/gdm3/daemon.conf

# Install fd.
dpkg -i $INSTALLER_DIR/fd.deb

# Install ripgrep.
dpkg -i $INSTALLER_DIR/ripgrep.deb

# Install exa.
unzip -d /tmp/exa $INSTALLER_DIR/exa.zip
place_as_root_user_with_mode_755 /tmp/exa/bin/exa /usr/local/bin/exa
place_as_root_user_with_mode_644 \
  /tmp/exa/completions/exa.bash /usr/share/bash-completion/completions/exa.bash
place_as_root_user_with_mode_644 \
  /tmp/exa/man/exa.1 /usr/local/share/man/man1/exa.1
place_as_root_user_with_mode_644 \
  /tmp/exa/man/exa_colors.5 /usr/local/share/man/man5/exa_colors.5
mandb

# Install bat.
dpkg -i $INSTALLER_DIR/bat.deb

# Install fzf.
tar --extract --file $INSTALLER_DIR/fzf.tar.gz --directory /usr/local/bin
extract_tar fzf_source.tar.gz /tmp/fzf_source
place_as_root_user_with_mode_644 \
  /tmp/fzf_source/man/man1/fzf.1 /usr/local/share/man/man1/fzf.1
place_as_root_user_with_mode_644 \
  /tmp/fzf_source/shell/completion.bash /usr/local/share/fzf/completion.bash
place_as_root_user_with_mode_644 \
  /tmp/fzf_source/shell/key-bindings.bash \
  /usr/local/share/fzf/key-bindings.bash
mandb

# Install zoxide.
apt install --yes $INSTALLER_DIR/zoxide.deb

# Install htop.
apt install --yes htop
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/htoprc "$USER_CONFIG_DIR"/htop/htoprc

# Make the F10 key available in the GNOME Terminal by stopping it from opening
# the GNOME Terminal menu's File item. Without doing this, changes made
# interactively to htop's settings can't be applied.
gsettings_set 'Terminal.Legacy.Settings menu-accelerator-enabled false'

# Install ncdu.
apt install --yes ncdu

# Install delta.
extract_tar delta.tar.gz /tmp/delta
place_as_root_user_with_mode_755 /tmp/delta/delta /usr/local/bin/delta
extract_tar delta_source.tar.gz /tmp/delta_source
place_as_root_user_with_mode_644 \
  tmp/delta_source/etc/completion/completion.bash \
  /usr/share/bash-completion/completions/delta.bash

# Install Git
apt install --yes git
# Add Git global config settings for user identity. These are placeholders
# which the user should change.
git_global_config_set 'user.name' 'Basic'
git_global_config_set 'user.email' 'basic@basic.box'
# Add Git global config setting for "git branch" sorting.
git_global_config_set 'branch.sort' '-committerdate'
# Add Git global config settings for "git log" formatting.
git_global_config_set 'log.date' 'format:%b %d %Y'
GIT_COMMIT_FORMAT="%C(yellow)%h %C(white)%<(31)%s %C(dim white)Commit by \
%Creset%C(magenta)%an %C(cyan)%ar %C(dim white)on %ad %C(auto)%d"
git_global_config_set 'format.pretty' "${GIT_COMMIT_FORMAT}"
# Add Git global config setting for "git pull" behaviour.
git_global_config_set 'pull.rebase' 'true'
# Add Git global config setting for "git push" behaviour when no refspec is
# given.
git_global_config_set 'push.default' 'current'
# Add Git global config settings to enable "git rerere" functionality.
git_global_config_set 'rerere.autoupdate' 'true'
git_global_config_set 'rerere.enabled' 'true'
# Add Git global config settings recommended by delta.
git_global_config_set 'core.pager' 'delta'
git_global_config_set 'delta.navigate' 'true'
git_global_config_set 'diff.colorMoved' 'default'
git_global_config_set 'interactive.diffFilter' 'delta --color-only'
git_global_config_set 'merge.conflictstyle' 'diff3'
# Add Git global config settings for line numbers for delta.
git_global_config_set 'delta.line-numbers' 'true'
# Add Git global config setting for default branch in new repositories.
git_global_config_set 'init.defaultBranch' 'main'

# Install gitk
apt install --yes gitk
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/gitk "$USER_CONFIG_DIR"/git/gitk

# Install and configure keyd.
apt install --yes libudev-dev
extract_tar keyd_source.tar.gz /tmp/keyd_source
make --directory=/tmp/keyd_source
make --directory=/tmp/keyd_source install
# keyd requires the configuration file to be available in /etc/keyd, but prefer
# to keep it within the user's home directory.
KEYD_DIR="$USER_CONFIG_DIR/keyd"
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/keyd_default.conf "$KEYD_DIR"/default.conf
ln --symbolic "$KEYD_DIR"/default.conf /etc/keyd/default.conf

# Make the "box" command available everywhere.
place_as_unprivileged_user_with_mode_755 \
  $INSTALLER_DIR/box.sh "$USER_BIN_DIR"/box

# Install direnv.
place_as_root_user_with_mode_755 \
  $INSTALLER_DIR/direnv.linux /usr/local/bin/direnv
extract_tar direnv_source.tar.gz /tmp/direnv_source
place_as_root_user_with_mode_644 \
  /tmp/direnv_source/man/direnv-fetchurl.1 \
  /usr/local/share/man/man1/direnv-fetchurl.1
place_as_root_user_with_mode_644 \
  /tmp/direnv_source/man/direnv-stdlib.1 \
  /usr/local/share/man/man1/direnv-stdlib.man1
place_as_root_user_with_mode_644 \
  /tmp/direnv_source/man/direnv.1 /usr/local/share/man/man1/direnv.1
place_as_root_user_with_mode_644 \
  /tmp/direnv_source/man/direnv.toml.1 /usr/local/share/man/man1/direnv.toml.1
mandb

# Install Fira Code Nerd Font.
place_as_root_user_with_mode_644 \
  $INSTALLER_DIR/fira_code.ttf /usr/local/share/fonts/fira_code.ttf
# Make Fira Code the system-wide monospace font.
gsettings_set 'desktop.interface monospace-font-name "FiraCode Nerd Font 11"'

# Install Starship.
tar --extract --file $INSTALLER_DIR/starship.tar.gz --directory /usr/local/bin
# The Starship binary is called with its full path here as calling it just with
# starship doesn't work.
/usr/local/bin/starship completions bash > \
  /usr/share/bash-completion/completions/starship.bash
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/starship.toml "$USER_CONFIG_DIR"/starship.toml

# Install HTTPie.
install_with_pipx httpie
USER_COMPLETION_DIR="$USER_DIR/.local/share/bash-completion/completions"
# The completion files needs to be named with of the commands which it relates
# to to work, so rather than naming it httpie.bash, it is named https.bash.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/httpie-completion.bash "$USER_COMPLETION_DIR"/http.bash
ln --symbolic \
  "$USER_COMPLETION_DIR"/http.bash \
  "$USER_COMPLETION_DIR"/https.bash

# Install Nmap.
apt install --yes nmap

# Install KeePassXC.
apt install --yes keepassxc
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/keepassxc.ini "$USER_CONFIG_DIR"/keepassxc/keepassxc.ini

# Add post-installation setup instructions.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/setup.rst "$USER_DIR"/setup.rst

# Install IPython.
install_with_pipx ipython

# Install Entomb.
install_with_pipx entomb

# Install MTR.
apt install --yes mtr-tiny

# Install tree.
apt install --yes tree

# Install tldr-pages.
install_with_pipx tldr
# tldr is called with its full path here as calling it just with tldr doesn't
# work.
"$USER_BIN_DIR"/tldr --print-completion bash >/tmp/tldr.bash
place_as_unprivileged_user_with_mode_644 \
  /tmp/tldr.bash "$USER_COMPLETION_DIR"/tldr.bash

# Install OfflineIMAP.
apt install --yes offlineimap

# Add a global Git ignore file.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/git_global_ignore "$USER_CONFIG_DIR"/git/ignore

# Install trash-cli.
install_with_pipx trash-cli
extract_tar trash_cli_source.tar.gz /tmp/trash_cli_source
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash.1 /usr/local/share/man/man1/trash.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-empty.1 \
  /usr/local/share/man/man1/trash-empty.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-list.1 \
  /usr/local/share/man/man1/trash-list.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-put.1 \
  /usr/local/share/man/man1/trash-put.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-restore.1 \
  /usr/local/share/man/man1/trash-restore.1
place_as_root_user_with_mode_644 \
  /tmp/trash_cli_source/man/man1/trash-rm.1 \
  /usr/local/share/man/man1/trash-rm.1
mandb

# Add a Ranger rc.conf file.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/ranger_rc.conf "$USER_CONFIG_DIR"/ranger/rc.conf

# Install Neovim.
# The default Vim package is no longer required, so remove it first.
apt purge --yes vim-tiny
NVIM_PATH=/usr/local/bin/nvim
place_as_root_user_with_mode_755 $INSTALLER_DIR/nvim.appimage $NVIM_PATH
extract_tar nvim_source.tar.gz /tmp/nvim_source
place_as_root_user_with_mode_644 \
  /tmp/nvim_source/src/man/nvim.1 /usr/local/share/man/man1/nvim.1
# Set Neovim as the alternative for the editor, ex, rview, rvim, vi, view, vim
# and vimdiff commands.
update-alternatives --install /usr/bin/editor editor $NVIM_PATH 50
update-alternatives --install /usr/bin/ex ex $NVIM_PATH 50
update-alternatives --install /usr/bin/rview rview $NVIM_PATH 50
update-alternatives --install /usr/bin/rvim rvim $NVIM_PATH 50
update-alternatives --install /usr/bin/vi vi $NVIM_PATH 50
update-alternatives --install /usr/bin/view view $NVIM_PATH 50
update-alternatives --install /usr/bin/vim vim $NVIM_PATH 50
update-alternatives --install /usr/bin/vimdiff vimdiff $NVIM_PATH 50
# Set Neovim as the sensible-editor for the root user so that ranger doesn't
# ask which editor to use the first time it goes to open a file for the root
# user.
# Invoking select-editor for the root user must be done using runuser or the
# .selected_editor file is created in the / directory rather than the /root
# directory.
runuser -l root -c 'echo 1 | select-editor'

# Configure Neovim.
# Put the LazyVim files in place.
NVIM_CONFIG_DIR="$USER_CONFIG_DIR/nvim"
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_init.lua \
  "$NVIM_CONFIG_DIR"/init.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_lazy_lock.json \
  "$NVIM_CONFIG_DIR"/lazy-lock.json
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_config_autocmds.lua \
  "$NVIM_CONFIG_DIR"/lua/config/autocmds.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_config_keymaps.lua \
  "$NVIM_CONFIG_DIR"/lua/config/keymaps.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_config_lazy.lua \
  "$NVIM_CONFIG_DIR"/lua/config/lazy.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_config_options.lua \
  "$NVIM_CONFIG_DIR"/lua/config/options.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_colourscheme.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/colourscheme.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_conform.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/conform.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_lualine.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/lualine.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_luasnip.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/luasnip.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_neotree.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/neotree.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_nvim_cmp.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/nvim_cmp.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_nvim_lint.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/nvim_lint.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_nvim_lspconfig.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/nvim_lspconfig.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_ranger.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/ranger.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_telescope.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/telescope.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_treesitter.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/treesitter.lua
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/nvim_plugins_which_key.lua \
  "$NVIM_CONFIG_DIR"/lua/plugins/which_key.lua
# Install Python LSP Server and its third-party plugins.
install_with_pipx python-lsp-server[flake8]
PYLS_ISORT_VERSION=$(get_version 'pyls-isort')
runuser \
  -l "$USERNAME" \
  -c "pipx inject python-lsp-server pyls-isort==${PYLS_ISORT_VERSION}"
PYTHON_LSP_BLACK_VERSION=$(get_version 'python-lsp-black')
runuser \
  -l "$USERNAME" \
  -c "pipx inject python-lsp-server python-lsp-black==${PYTHON_LSP_BLACK_VERSION}"
# Set up LazyVim.
runuser -l "$USERNAME" -c 'nvim --headless "+Lazy! restore" +qa'

# Install curl.
apt install --yes curl

# Install rfkill. This is used to turn Bluetooth off when the system boots.
apt install --yes rfkill

# Add a yt-dlp configuration file.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/yt_dlp_config \
  "$USER_CONFIG_DIR"/yt-dlp/config

# Install atool.
apt install --yes atool

# Install bandwhich.
tar --extract --file $INSTALLER_DIR/bandwhich.tar.gz --directory /usr/local/bin
extract_tar bandwhich_source.tar.gz /tmp/bandwhich_source
place_as_root_user_with_mode_644 \
  /tmp/bandwhich_source/docs/bandwhich.1 /usr/local/share/man/man1/bandwhich.1
mandb
# Allow bandwhich to run without being called with sudo.
setcap \
  cap_sys_ptrace,cap_dac_read_search,cap_net_raw,cap_net_admin+ep \
  /usr/local/bin/bandwhich

# Install whois.
apt install --yes whois

# Add ranger colourscheme.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/ranger_colourscheme.py \
  "$USER_CONFIG_DIR"/ranger/colorschemes/box.py

# Install smartmontools.
apt install --yes smartmontools

# Install python-is-python3.
apt install --yes python-is-python3

# Install zathura.
apt install --yes zathura
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/zathurarc "$USER_CONFIG_DIR"/zathura/zathurarc

# Add ranger rifle.conf and scope.sh files.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/ranger_rifle.conf \
  "$USER_CONFIG_DIR"/ranger/rifle.conf
place_as_unprivileged_user_with_mode_755 \
  $INSTALLER_DIR/ranger_scope.sh \
  "$USER_CONFIG_DIR"/ranger/scope.sh

# Install acpi.
apt install --yes acpi

# Install Syncthing.
wget \
  --output-document /usr/share/keyrings/syncthing-archive-keyring.gpg \
  https://syncthing.net/release-key.gpg
place_as_root_user_with_mode_644 \
  $INSTALLER_DIR/sources_syncthing.list /etc/apt/sources.list.d/syncthing.list
apt update
apt install --yes syncthing
# Allow passwordless sudo for the ufw command which deletes the Syncthing
# firewall rule. This is required for the "box sync" command to work properly
# when the terminal it is executed in is closed before Syncthing is closed.
SUDOERS_DIR='/etc/sudoers.d'
place_as_root_user_with_mode_440 $INSTALLER_DIR/sudoers_ufw $SUDOERS_DIR/ufw

# Add ipython_config.py file.
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/ipython_config.py \
  "$USER_DIR"/.ipython/profile_default/ipython_config.py

# Allow passwordless sudo for the apt update and apt upgrade commands.
place_as_root_user_with_mode_440 $INSTALLER_DIR/sudoers_apt $SUDOERS_DIR/apt

# Install Lynis.
apt install --yes lynis
# Allow passwordless sudo for the "lynis audit system" command.
place_as_root_user_with_mode_440 \
  $INSTALLER_DIR/sudoers_lynis $SUDOERS_DIR/lynis

# Install ClamAV.
apt install --yes clamav

# Install Rootkit Hunter.
apt install --yes rkhunter
# Allow passwordless sudo for the "rkhunter" command.
place_as_root_user_with_mode_440 \
  $INSTALLER_DIR/sudoers_rkhunter $SUDOERS_DIR/rkhunter

# Install pyenv.
PYENV_DIR="$USER_DIR/.pyenv"
extract_tar pyenv_source.tar.gz /tmp/pyenv_source
mkdir -p "$PYENV_DIR"
cp --recursive /tmp/pyenv_source/* "$PYENV_DIR"
chown --recursive "$USERNAME":"$USERNAME" "$PYENV_DIR"
# Install Python build dependencies. This is the complete list taken from
# https://github.com/pyenv/pyenv/wiki#suggested-build-environment. Even though
# some of these packages are already installed, the list is used here without
# modification in case in the future something changes so that a package which
# is currently installed and in the list is no longer installed.
apt install --yes \
  build-essential \
  curl \
  libbz2-dev \
  libffi-dev \
  liblzma-dev \
  libncursesw5-dev \
  libreadline-dev \
  libsqlite3-dev \
  libssl-dev \
  libxml2-dev \
  libxmlsec1-dev \
  llvm \
  make \
  tk-dev \
  wget xz-utils \
  zlib1g-dev

# Install geckodriver.
tar \
  --extract --file \
  $INSTALLER_DIR/geckodriver.tar.gz \
  --directory /usr/local/bin

# Install JupyterLab.
install_with_pipx jupyterlab
# Share JupyterLab user settings across all JupyterLab environments.
JUPYTERLAB_APPUTILS_EXTENSION_DIR="$USER_DIR/.jupyter/lab/user-settings/\
@jupyterlab/apputils-extension"
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/jupyterlab_apputils_settings \
  "$JUPYTERLAB_APPUTILS_EXTENSION_DIR"/themes.jupyterlab-settings
JUPYTERLAB_CODEMIROR_EXTENSION_DIR="$USER_DIR/.jupyter/lab/user-settings/\
@jupyterlab/codemirror-extension"
place_as_unprivileged_user_with_mode_644 \
  $INSTALLER_DIR/jupyterlab_codemirror_settings \
  "$JUPYTERLAB_CODEMIROR_EXTENSION_DIR"/commands.jupyterlab-settings

# Allow passwordless sudo for the "powertop" command.
place_as_root_user_with_mode_440 \
  $INSTALLER_DIR/sudoers_powertop $SUDOERS_DIR/powertop

# Install TLP.
apt install --yes tlp
# Allow passwordless sudo for the "tlp" and "tlp-stat" commands.
place_as_root_user_with_mode_440 $INSTALLER_DIR/sudoers_tlp $SUDOERS_DIR/tlp
# Configure battery charging thresholds.
place_as_root_user_with_mode_644 \
  $INSTALLER_DIR/tlp_charging_thresholds.conf \
  /etc/tlp.d/10-charging-thresholds.conf

# Install Libnotify.
# This provides the notify-send command.
apt install --yes libnotify-bin

# Don't show the lecture message the first time "sudo" is used.
place_as_root_user_with_mode_440 \
  $INSTALLER_DIR/sudoers_lecture $SUDOERS_DIR/lecture

# Allow passwordless sudo for the "cryptsetup isLuks" command.
# This is so that the first_login.sh script doesn't need to ask for a password
# when looking for additional encrypted disks.
place_as_root_user_with_mode_440 \
  $INSTALLER_DIR/sudoers_cryptsetup $SUDOERS_DIR/cryptsetup

# Install Thunderbird.
apt install --yes thunderbird

# Make the "git_wrapper" command available everywhere.
place_as_unprivileged_user_with_mode_755 \
  $INSTALLER_DIR/git_wrapper.sh "$USER_BIN_DIR"/git_wrapper

# Install wl-clipboard.
apt install --yes wl-clipboard

# Install Podman.
apt install --yes podman

# Set the terminal bell to visual rather than audible.
gsettings_set 'desktop.wm.preferences audible-bell false'
gsettings_set 'desktop.wm.preferences visual-bell true'
gsettings_set 'desktop.wm.preferences visual-bell-type "frame-flash"'

# Configure Firefox.
place_as_root_user_with_mode_644 \
  $INSTALLER_DIR/firefox_policies.json \
  /usr/share/firefox-esr/distribution/policies.json
