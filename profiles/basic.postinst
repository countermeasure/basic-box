#!/bin/bash

# Set intuitive error behaviour.
set -o errexit -o nounset -o pipefail

INSTALLER_DIR='/media/cdrom/simple-cdd'
LOCAL_DIR='/usr/local/simple-cdd'

USERNAME=$(ls /home)
USER_DIR="/home/$USERNAME"
USER_BIN_DIR="$USER_DIR/.local/bin"
USER_CONFIG_DIR="$USER_DIR/.config"
AUTOSTART_DIR="$USER_CONFIG_DIR/autostart"

git_global_config_set () {
    # Add a setting to the Git global configuration. It's necessary to wrap the
    # second argument in double quotes to set the configuration values
    # correctly.
    runuser --login "$USERNAME" --command "git config --global $1 \"$2\""
}
gsettings_set () {
    # Change a dconf setting. It's necessary to use dbus-launch ahead of
    # gsettings when invoking this as the root user.
    runuser \
        --login "$USERNAME" \
        --command "dbus-launch gsettings set org.gnome.$1"
}

# Copy extra files onto the new installation.
cp $INSTALLER_DIR/bandwhich-0.20.0-source.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/bandwhich-v0.20.0-x86_64-unknown-linux-musl.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/bat_0.20.0_amd64.deb $LOCAL_DIR
cp $INSTALLER_DIR/black $LOCAL_DIR
cp $INSTALLER_DIR/box.sh $LOCAL_DIR
cp $INSTALLER_DIR/delta-0.12.1-source.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/delta-0.12.1-x86_64-unknown-linux-gnu.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/direnv-v2.31.0-source.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/direnv.linux-amd64 $LOCAL_DIR
cp $INSTALLER_DIR/dot_bashrc_aliases $LOCAL_DIR
cp $INSTALLER_DIR/dot_bashrc_functions $LOCAL_DIR
cp $INSTALLER_DIR/dot_bashrc_modifications $LOCAL_DIR
cp $INSTALLER_DIR/dot_profile_modifications $LOCAL_DIR
cp $INSTALLER_DIR/exa-linux-x86_64-v0.10.1.zip $LOCAL_DIR
cp $INSTALLER_DIR/fd_8.3.2_amd64.deb $LOCAL_DIR
cp $INSTALLER_DIR/Fira_Code_Regular_Nerd_Font_Complete.otf $LOCAL_DIR
cp $INSTALLER_DIR/first_boot.service $LOCAL_DIR
cp $INSTALLER_DIR/first_boot.sh $LOCAL_DIR
cp $INSTALLER_DIR/first_login.desktop $LOCAL_DIR
cp $INSTALLER_DIR/first_login.sh $LOCAL_DIR
cp $INSTALLER_DIR/fzf-0.30.0-linux_amd64.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/fzf-0.30.0-source.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/gitk $LOCAL_DIR
cp $INSTALLER_DIR/git_global_ignore $LOCAL_DIR
cp $INSTALLER_DIR/htoprc $LOCAL_DIR
cp $INSTALLER_DIR/httpie-completion.bash $LOCAL_DIR
cp $INSTALLER_DIR/keepassxc.ini $LOCAL_DIR
cp $INSTALLER_DIR/keyd-v2.4.0-source.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/keyd_default.conf $LOCAL_DIR
cp $INSTALLER_DIR/MullvadVPN-2022.1_amd64.deb $LOCAL_DIR
cp $INSTALLER_DIR/nvim-linux64.deb $LOCAL_DIR
cp $INSTALLER_DIR/nvim_init.lua $LOCAL_DIR
cp $INSTALLER_DIR/ranger_rc.conf $LOCAL_DIR
cp $INSTALLER_DIR/ripgrep_13.0.0_amd64.deb $LOCAL_DIR
cp $INSTALLER_DIR/setup.rst $LOCAL_DIR
cp $INSTALLER_DIR/starship-x86_64-unknown-linux-gnu.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/starship.toml $LOCAL_DIR
cp $INSTALLER_DIR/stylua-linux.zip $LOCAL_DIR
cp $INSTALLER_DIR/stylua.toml $LOCAL_DIR
cp $INSTALLER_DIR/trash-cli-0.22.4.16-source.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/yt-dlp.tar.gz $LOCAL_DIR
cp $INSTALLER_DIR/yt_dlp_config $LOCAL_DIR
cp $INSTALLER_DIR/zoxide-v0.8.1-x86_64-unknown-linux-musl.tar.gz $LOCAL_DIR

# Copy first_boot systemd unit file into place.
cp $LOCAL_DIR/first_boot.service /etc/systemd/system

# Enable the first_boot systemd service. This performs configuration tasks
# which can't be done in this postinst script, and is then removed.
systemctl enable first_boot.service

# Install the UFW firewall.
apt install ufw

# Install the Mullvad VPN app.
apt install --yes $LOCAL_DIR/MullvadVPN-2022.1_amd64.deb

# Set up a desktop entry to run the first_login script at login. This performs
# configuration tasks which require user interaction, and is then removed.
runuser \
    --login \
    "$USERNAME" \
    --command \
    "desktop-file-install --dir=$AUTOSTART_DIR $LOCAL_DIR/first_login.desktop"

# Install Tor Browser Launcher.
apt install --yes torbrowser-launcher

# Install pipx.
apt install --yes python3-pip python3-venv
runuser -l "$USERNAME" -c 'pip3 install pipx'

# Copy .bashrc extensions into place and enable them.
cp $LOCAL_DIR/dot_bashrc_aliases "$USER_DIR"/.bashrc_aliases
cp $LOCAL_DIR/dot_bashrc_functions "$USER_DIR"/.bashrc_functions
cp $LOCAL_DIR/dot_bashrc_modifications "$USER_DIR"/.bashrc_modifications
chown "$USERNAME":"$USERNAME" "$USER_DIR"/.bashrc_*
chmod 644 "$USER_DIR"/.bashrc_*
printf '\n# Enable .bashrc extensions.\n' >> "$USER_DIR"/.bashrc
# shellcheck disable=SC2016
echo 'for file in ~/.bashrc_*; do . "$file"; done' >> "$USER_DIR"/.bashrc

# Copy .profile extension into place and enable it.
cp $LOCAL_DIR/dot_profile_modifications "$USER_DIR"/.profile_modifications
chown "$USERNAME":"$USERNAME" "$USER_DIR"/.profile_modifications
chmod 644 "$USER_DIR"/.profile_modifications
printf '\n# Enable .profile modifications.\n' >> "$USER_DIR"/.profile
# shellcheck disable=SC2016
echo '. "$HOME/.profile_modifications"' >> "$USER_DIR"/.profile

# Install yt-dlp.
runuser -l "$USERNAME" -c 'pipx install yt-dlp==2022.4.8'
tar --extract -f $LOCAL_DIR/yt-dlp.tar.gz --directory /tmp
mkdir /usr/local/share/man/man1
cp /tmp/yt-dlp/yt-dlp.1 /usr/local/share/man/man1
cp /tmp/yt-dlp/completions/bash/yt-dlp /usr/share/bash-completion/completions
mandb

apt install --yes ffmpeg

# Install ranger.
apt install --yes ranger

# Set dark theme globally.
gsettings_set 'desktop.interface gtk-theme "Adwaita-dark"'

# Display date and battery percentage in top bar.
gsettings_set 'desktop.interface clock-show-weekday true'
gsettings_set 'desktop.interface show-battery-percentage true'

# Never blank screen, dim screen or suspend when inactive.
gsettings_set 'desktop.session idle-delay 0'
gsettings_set 'settings-daemon.plugins.power idle-dim false'
gsettings_set 'settings-daemon.plugins.power sleep-inactive-ac-type "nothing"'

# Make display colour warmer at night.
gsettings_set 'settings-daemon.plugins.color night-light-enabled true'

# Enable natural scrolling for mouse.
gsettings_set 'desktop.peripherals.mouse natural-scroll true'

# Speed up trackpad and enable trackpad tap-to-click.
gsettings_set 'desktop.peripherals.touchpad speed 0.25'
gsettings_set 'desktop.peripherals.touchpad tap-to-click true'

# Enable automatic login.
sed -i \
    's/.*AutomaticLoginEnable =.*/AutomaticLoginEnable = true/' \
    /etc/gdm3/daemon.conf
sed -i \
    "s/.*AutomaticLogin =.*/AutomaticLogin = $USERNAME/" \
    /etc/gdm3/daemon.conf

# Install fd.
dpkg -i $LOCAL_DIR/fd_8.3.2_amd64.deb

# Install ripgrep.
dpkg -i $LOCAL_DIR/ripgrep_13.0.0_amd64.deb

# Install exa.
unzip -d /tmp/exa_0.10.1 $LOCAL_DIR/exa-linux-x86_64-v0.10.1.zip
cp /tmp/exa_0.10.1/bin/exa /usr/local/bin
cp \
    /tmp/exa_0.10.1/completions/exa.bash \
    /usr/share/bash-completion/completions
cp /tmp/exa_0.10.1/man/exa.1 /usr/local/share/man/man1
mkdir /usr/local/share/man/man5
cp /tmp/exa_0.10.1/man/exa_colors.5 /usr/local/share/man/man5
mandb

# Install bat.
dpkg -i $LOCAL_DIR/bat_0.20.0_amd64.deb

# Install fzf.
tar --extract -f $LOCAL_DIR/fzf-0.30.0-linux_amd64.tar.gz --directory /tmp
tar --extract -f $LOCAL_DIR/fzf-0.30.0-source.tar.gz --directory /tmp
cp /tmp/fzf /usr/local/bin
cp /tmp/fzf-0.30.0/man/man1/fzf.1 /usr/local/share/man/man1
mkdir /usr/local/share/fzf
cp /tmp/fzf-0.30.0/shell/completion.bash /usr/local/share/fzf
cp /tmp/fzf-0.30.0/shell/key-bindings.bash /usr/local/share/fzf
mandb

# Install zoxide.
mkdir /tmp/zoxide-v0.8.1
tar \
    --extract -f $LOCAL_DIR/zoxide-v0.8.1-x86_64-unknown-linux-musl.tar.gz \
    --directory /tmp/zoxide-v0.8.1
cp /tmp/zoxide-v0.8.1/zoxide /usr/local/bin
cp /tmp/zoxide-v0.8.1/man/man1/zoxide-add.1 /usr/local/share/man/man1
cp /tmp/zoxide-v0.8.1/man/man1/zoxide-import.1 /usr/local/share/man/man1
cp /tmp/zoxide-v0.8.1/man/man1/zoxide-init.1 /usr/local/share/man/man1
cp /tmp/zoxide-v0.8.1/man/man1/zoxide-query.1 /usr/local/share/man/man1
cp /tmp/zoxide-v0.8.1/man/man1/zoxide-remove.1 /usr/local/share/man/man1
cp /tmp/zoxide-v0.8.1/man/man1/zoxide.1 /usr/local/share/man/man1
cp \
    /tmp/zoxide-v0.8.1/completions/zoxide.bash \
    /usr/share/bash-completion/completions
mandb

# Install htop.
apt install --yes htop
HTOP_DIR="$USER_CONFIG_DIR/htop"
mkdir "$HTOP_DIR"
cp $LOCAL_DIR/htoprc "$HTOP_DIR"
chown --recursive "$USERNAME":"$USERNAME" "$HTOP_DIR"
chmod 644 "$HTOP_DIR"/htoprc

# Make the F10 key available in the GNOME Terminal by stopping it from opening
# the GNOME Terminal menu's File item. Without doing this, changes made
# interactively to htop's settings can't be applied.
gsettings_set 'Terminal.Legacy.Settings menu-accelerator-enabled false'

# Install ncdu.
apt install --yes ncdu

# Install delta.
tar \
    --extract -f $LOCAL_DIR/delta-0.12.1-x86_64-unknown-linux-gnu.tar.gz \
    --directory /tmp
tar --extract -f $LOCAL_DIR/delta-0.12.1-source.tar.gz --directory /tmp
cp /tmp/delta-0.12.1-x86_64-unknown-linux-gnu/delta /usr/local/bin
cp \
    /tmp/delta-0.12.1/etc/completion/completion.bash \
    /usr/share/bash-completion/completions/delta.bash

# Install Git
apt install --yes git
# Add Git global config settings for user identity. These are placeholders
# which the user should change.
git_global_config_set 'user.name' 'Basic'
git_global_config_set 'user.email' 'basic@basic.box'
# Add Git global config setting for "git branch" sorting.
git_global_config_set 'branch.sort' '-committerdate'
# Add Git global config settings for "git log" formatting.
git_global_config_set 'log.date' 'format:%b %d %Y'
git_global_config_set \
    'format.pretty' \
    '%C(auto)%h %C(dim white)%ad%C(auto)%d%Creset %s %C(dim white)by %an %ar'
# Add Git global config setting for "git pull" behaviour.
git_global_config_set 'pull.rebase' 'true'
# Add Git global config settings to enable "git rerere" functionality.
git_global_config_set 'rerere.autoupdate' 'true'
git_global_config_set 'rerere.enabled' 'true'
# Add Git global config settings recommended by delta.
git_global_config_set 'core.pager' 'delta'
git_global_config_set 'delta.navigate' 'true'
git_global_config_set 'diff.colorMoved' 'default'
git_global_config_set 'interactive.diffFilter' 'delta --color-only'
git_global_config_set 'merge.conflictstyle' 'diff3'
# Add Git global config settings for line numbers for delta.
git_global_config_set 'delta.line-numbers' 'true'

# Install gitk
apt install --yes gitk
GIT_DIR="$USER_CONFIG_DIR/git"
mkdir "$GIT_DIR"
cp $LOCAL_DIR/gitk "$GIT_DIR"
chown --recursive "$USERNAME":"$USERNAME" "$GIT_DIR"
chmod 644 "$GIT_DIR"/gitk

# Install and configure keyd.
apt install --yes libudev-dev
tar --extract -f $LOCAL_DIR/keyd-v2.4.0-source.tar.gz --directory /tmp
make --directory=/tmp/keyd-2.4.0
make --directory=/tmp/keyd-2.4.0 install
# keyd requires the configuration file to be available in /etc/keyd, but prefer
# to keep it within the user's home directory.
KEYD_DIR="$USER_CONFIG_DIR/keyd"
mkdir "$KEYD_DIR"
cp $LOCAL_DIR/keyd_default.conf "$KEYD_DIR/default.conf"
chown --recursive "$USERNAME":"$USERNAME" "$KEYD_DIR"
chmod 644 "$KEYD_DIR"/default.conf
ln --symbolic "$KEYD_DIR"/default.conf /etc/keyd/default.conf

# Make the "box" command available everywhere.
BOX_SCRIPT_PATH="$USER_BIN_DIR/box"
cp $LOCAL_DIR/box.sh "$BOX_SCRIPT_PATH"
chown "$USERNAME":"$USERNAME" "$BOX_SCRIPT_PATH"
chmod 755 "$BOX_SCRIPT_PATH"

# Install direnv.
DIRENV_EXECUTABLE_PATH='/usr/local/bin/direnv'
cp $LOCAL_DIR/direnv.linux-amd64 $DIRENV_EXECUTABLE_PATH
chmod 755 $DIRENV_EXECUTABLE_PATH
tar --extract -f $LOCAL_DIR/direnv-v2.31.0-source.tar.gz --directory /tmp
cp /tmp/direnv-2.31.0/man/direnv-fetchurl.1 /usr/local/share/man/man1
cp /tmp/direnv-2.31.0/man/direnv-stdlib.1 /usr/local/share/man/man1
cp /tmp/direnv-2.31.0/man/direnv.1 /usr/local/share/man/man1
cp /tmp/direnv-2.31.0/man/direnv.toml.1 /usr/local/share/man/man1
mandb

# Install Fira Code Nerd Font.
FONTS_DIR='/usr/local/share/fonts'
cp $LOCAL_DIR/Fira_Code_Regular_Nerd_Font_Complete.otf $FONTS_DIR
chmod 664 $FONTS_DIR/Fira_Code_Regular_Nerd_Font_Complete.otf
# Make Fira Code the system-wide monospace font.
gsettings_set 'desktop.interface monospace-font-name "FiraCode Nerd Font 11"'

# Install Starship.
tar \
    --extract -f $LOCAL_DIR/starship-x86_64-unknown-linux-gnu.tar.gz \
    --directory /usr/local/bin
# The Starship binary is called with its full path here as calling it just with
# starship doesn't work.
/usr/local/bin/starship completions bash > \
    /usr/share/bash-completion/completions/starship.bash
cp $LOCAL_DIR/starship.toml "$USER_CONFIG_DIR"
chown "$USERNAME":"$USERNAME" "$USER_CONFIG_DIR"/starship.toml
chmod 664 "$USER_CONFIG_DIR"/starship.toml

# Install HTTPie.
runuser -l "$USERNAME" -c 'pipx install httpie==3.2.1'
USER_SHARE_DIR="$USER_DIR/.local/share"
USER_COMPLETION_DIR="$USER_SHARE_DIR/bash-completion/completions"
mkdir -p "$USER_COMPLETION_DIR"
# The completion file needs to be named with of the commands which it relates
# to to work, so rather than naming it httpie.bash, it is named https.bash.
cp $LOCAL_DIR/httpie-completion.bash "$USER_COMPLETION_DIR"/http.bash
ln --symbolic \
    "$USER_COMPLETION_DIR"/http.bash \
    "$USER_COMPLETION_DIR"/https.bash
chown --recursive "$USERNAME":"$USERNAME" "$USER_SHARE_DIR"
chmod 644 "$USER_COMPLETION_DIR"/http.bash

# Install Nmap.
apt install --yes nmap

# Install KeePassXC.
apt install --yes keepassxc
KEEPASSXC_DIR="$USER_CONFIG_DIR/keepassxc"
mkdir "$KEEPASSXC_DIR"
cp $LOCAL_DIR/keepassxc.ini "$KEEPASSXC_DIR"
chown --recursive "$USERNAME":"$USERNAME" "$KEEPASSXC_DIR"
chmod 644 "$KEEPASSXC_DIR"/keepassxc.ini

# Add post-installation setup instructions.
cp $LOCAL_DIR/setup.rst "$USER_DIR"
chown "$USERNAME":"$USERNAME" "$USER_DIR"/setup.rst
chmod 644 "$USER_DIR"/setup.rst

# Install IPython.
runuser -l "$USERNAME" -c 'pipx install ipython==8.3.0'

# Install Entomb.
runuser -l "$USERNAME" -c 'pipx install entomb==0.4.0'

# Install MTR.
apt install --yes mtr-tiny

# Install tree.
apt install --yes tree

# Install tldr-pages.
runuser -l "$USERNAME" -c 'pipx install tldr==3.1.0'
# tldr is called with its full path here as calling it just with tldr doesn't
# work.
"$USER_BIN_DIR"/tldr --print-completion bash > "$USER_COMPLETION_DIR"/tldr.bash
chown "$USERNAME":"$USERNAME" "$USER_COMPLETION_DIR"/tldr.bash
chmod 644 "$USER_COMPLETION_DIR"/tldr.bash

# Install OfflineIMAP.
apt install --yes offlineimap

# Add a global Git ignore file.
cp $LOCAL_DIR/git_global_ignore "$GIT_DIR"/ignore
chown "$USERNAME":"$USERNAME" "$GIT_DIR"/ignore
chmod 644 "$GIT_DIR"/ignore

# Install trash-cli.
runuser -l "$USERNAME" -c 'pipx install trash-cli==0.22.4.16'
tar --extract -f $LOCAL_DIR/trash-cli-0.22.4.16-source.tar.gz --directory /tmp
cp /tmp/trash-cli-0.22.4.16/man/man1/trash.1 /usr/local/share/man/man1
cp /tmp/trash-cli-0.22.4.16/man/man1/trash-empty.1 /usr/local/share/man/man1
cp /tmp/trash-cli-0.22.4.16/man/man1/trash-list.1 /usr/local/share/man/man1
cp /tmp/trash-cli-0.22.4.16/man/man1/trash-put.1 /usr/local/share/man/man1
cp /tmp/trash-cli-0.22.4.16/man/man1/trash-restore.1 /usr/local/share/man/man1
cp /tmp/trash-cli-0.22.4.16/man/man1/trash-rm.1 /usr/local/share/man/man1
mandb

# Add a Ranger rc.conf file.
RANGER_DIR="$USER_CONFIG_DIR/ranger"
mkdir "$RANGER_DIR"
cp $LOCAL_DIR/ranger_rc.conf "$RANGER_DIR/rc.conf"
chown --recursive "$USERNAME":"$USERNAME" "$RANGER_DIR"
chmod 644 "$RANGER_DIR"/rc.conf

# Install Neovim.
# The default Vim package is no longer required, so remove it first.
apt purge --yes vim-tiny
apt install --yes $LOCAL_DIR/nvim-linux64.deb
# Set Neovim as the alternative for the editor, ex, rview, rvim, vi, view, vim
# and vimdiff commands.
NVIM_PATH=/usr/bin/nvim
update-alternatives --install /usr/bin/editor editor $NVIM_PATH 50
update-alternatives --install /usr/bin/ex ex $NVIM_PATH 50
update-alternatives --install /usr/bin/rview rview $NVIM_PATH 50
update-alternatives --install /usr/bin/rvim rvim $NVIM_PATH 50
update-alternatives --install /usr/bin/vi vi $NVIM_PATH 50
update-alternatives --install /usr/bin/view view $NVIM_PATH 50
update-alternatives --install /usr/bin/vim vim $NVIM_PATH 50
update-alternatives --install /usr/bin/vimdiff vimdiff $NVIM_PATH 50
# Set Neovim as the sensible-editor for the root user so that ranger doesn't
# ask which editor to use the first time it goes to open a file for the root
# user.
# Invoking select-editor for the root user must be done using runuser or the
# .selected_editor file is created in the / directory rather than the /root
# directory.
runuser -l root -c 'echo 1 | select-editor'

# Configure Neovim.
# Put the init file in place.
NVIM_CONFIG_DIR="$USER_CONFIG_DIR/nvim"
mkdir "$NVIM_CONFIG_DIR"
cp $LOCAL_DIR/nvim_init.lua "$NVIM_CONFIG_DIR"/init.lua
chown --recursive "$USERNAME":"$USERNAME" "$NVIM_CONFIG_DIR"
chmod 644 "$NVIM_CONFIG_DIR"/init.lua
# Install the Neovim Python client.
PYNVIM_DIR="$USER_DIR"/.local/pip/venvs/pynvim
runuser -l "$USERNAME" -c "python3 -m venv $PYNVIM_DIR"
runuser -l "$USERNAME" -c "$PYNVIM_DIR/bin/pip install pynvim==0.4.3"
# Install plugins.
git clone \
    --depth 1 \
    https://github.com/wbthomason/packer.nvim \
    "$USER_SHARE_DIR/nvim/site/pack/packer/start/packer.nvim"
chown --recursive "$USERNAME":"$USERNAME" "$USER_SHARE_DIR/nvim"
runuser \
    -l "$USERNAME" \
    -c \
    'nvim --headless -c "autocmd User PackerComplete quitall" -c "PackerSync"'
# Install ShellCheck.
apt install --yes shellcheck
# Install StyLua.
unzip -d /usr/local/bin $LOCAL_DIR/stylua-linux.zip stylua
chmod 755 /usr/local/bin/stylua
# Copy StyLua configuration file into place.
STYLUA_CONFIG_DIR="$USER_CONFIG_DIR/stylua"
mkdir "$STYLUA_CONFIG_DIR"
cp $LOCAL_DIR/stylua.toml "$STYLUA_CONFIG_DIR"/stylua.toml
chown --recursive "$USERNAME":"$USERNAME" "$STYLUA_CONFIG_DIR"
chmod 644 "$STYLUA_CONFIG_DIR"/stylua.toml
# Install universal-ctags.
apt install --yes universal-ctags
# Install Python LSP Server and its third-party plugins.
runuser -l "$USERNAME" -c 'pipx install python-lsp-server[flake8]==1.4.1'
runuser -l "$USERNAME" -c 'pipx inject python-lsp-server pyls-isort==0.2.2'
runuser \
  -l "$USERNAME" \
  -c 'pipx inject python-lsp-server python-lsp-black==1.2.1'
# Copy Black configuration file into place.
cp $LOCAL_DIR/black "$USER_CONFIG_DIR"
chown "$USERNAME":"$USERNAME" "$USER_CONFIG_DIR"/black
chmod 644 "$USER_CONFIG_DIR"/black

# Install curl.
apt install --yes curl

# Install rfkill. This is used to turn Bluetooth off when the system boots.
apt install --yes rfkill

# Add a yt-dlp configuration file.
YT_DLP_DIR="$USER_CONFIG_DIR/yt-dlp"
mkdir "$YT_DLP_DIR"
cp $LOCAL_DIR/yt_dlp_config "$YT_DLP_DIR"/config
chown --recursive "$USERNAME":"$USERNAME" "$YT_DLP_DIR"
chmod 644 "$YT_DLP_DIR"/config

# Install atool.
apt install --yes atool

# Install bandwhich.
tar \
    --extract \
    -f $LOCAL_DIR/bandwhich-v0.20.0-x86_64-unknown-linux-musl.tar.gz \
    --directory /tmp
cp /tmp/bandwhich /usr/local/bin
tar --extract -f $LOCAL_DIR/bandwhich-0.20.0-source.tar.gz --directory /tmp
cp /tmp/bandwhich-0.20.0/docs/bandwhich.1 /usr/local/share/man/man1
mandb
# Allow bandwhich to run without being called with sudo.
setcap \
    cap_sys_ptrace,cap_dac_read_search,cap_net_raw,cap_net_admin+ep \
    /usr/local/bin/bandwhich
